{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\snmed\\\\proyectos\\\\defi-staking\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\snmed\\\\proyectos\\\\defi-staking\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\snmed\\\\proyectos\\\\defi-staking\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\snmed\\\\proyectos\\\\defi-staking\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\snmed\\\\proyectos\\\\defi-staking\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\snmed\\\\proyectos\\\\defi-staking\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\snmed\\\\proyectos\\\\defi-staking\\\\src\\\\components\\\\Airdrop.js\";\nimport React, { Component } from 'react';\n\nvar Airdrop = /*#__PURE__*/function (_Component) {\n  _inherits(Airdrop, _Component);\n\n  function Airdrop() {\n    var _this;\n\n    _classCallCheck(this, Airdrop);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Airdrop).call(this));\n    _this.state = {\n      time: {},\n      seconds: 20\n    };\n    _this.timer = 0;\n    _this.startTimer = _this.startTimer.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.countdown = _this.countdown.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Airdrop, [{\n    key: \"startTimer\",\n    value: function startTimer() {\n      if (this.timer == 0 && this.state.seconds > 0) {\n        this.timer = setInterval(this.countdown, 1000);\n      }\n    }\n  }, {\n    key: \"countdown\",\n    value: function countdown() {\n      //Count 1 second at the time\n      var seconds = this.state.seconds - 1;\n      this.setState({\n        time: this.secondsToTime(seconds),\n        seconds: seconds\n      }); //Stop counting when hits 0\n\n      if (seconds == 0) {\n        clearInterval(this.timer);\n      }\n    }\n  }, {\n    key: \"secondsToTime\",\n    value: function secondsToTime(secs) {\n      var hours, minutes, seconds;\n      hours = Math.floor(secs / (60 * 60));\n      var devisor_for_minutes = secs % (60 * 60);\n      minutes = Math.floor(devisor_for_minutes / 60);\n      var devisor_for_seconds = devisor_for_minutes % 60;\n      seconds = Math.ceil(devisor_for_seconds);\n      var obj = {\n        'h': hours,\n        'm': minutes,\n        's': seconds\n      };\n      return obj;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var timeLeftVar = this.secondsToTime(this.state.seconds);\n      this.setState({\n        time: timeLeftVar\n      });\n    }\n  }, {\n    key: \"airdropReleaseTokens\",\n    value: function airdropReleaseTokens() {\n      var stakingB = this.props.stakingBalance;\n\n      if (stakingB >= '50000000000000000000') {\n        this.startTimer();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      //Airdrop has a timer that counts down\n      //initialize after our customer has staked at least 50 tokens\n      //timer functionality, countdown, startTimer, state - for time to work\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          color: 'black'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 4\n        }\n      }, this.state.time.m, \":\", this.state.time.s);\n    }\n  }]);\n\n  return Airdrop;\n}(Component);\n\nexport default Airdrop;","map":{"version":3,"sources":["C:/Users/snmed/proyectos/defi-staking/src/components/Airdrop.js"],"names":["React","Component","Airdrop","state","time","seconds","timer","startTimer","bind","countdown","setInterval","setState","secondsToTime","clearInterval","secs","hours","minutes","Math","floor","devisor_for_minutes","devisor_for_seconds","ceil","obj","timeLeftVar","stakingB","props","stakingBalance","color","m","s"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;IAEMC,O;;;AAEL,qBAAa;AAAA;;AAAA;;AACZ;AACA,UAAKC,KAAL,GAAa;AAACC,MAAAA,IAAI,EAAE,EAAP;AAAWC,MAAAA,OAAO,EAAE;AAApB,KAAb;AACA,UAAKC,KAAL,GAAa,CAAb;AACA,UAAKC,UAAL,GAAkB,MAAKA,UAAL,CAAgBC,IAAhB,uDAAlB;AACA,UAAKC,SAAL,GAAiB,MAAKA,SAAL,CAAeD,IAAf,uDAAjB;AALY;AAMZ;;;;iCAEW;AACX,UAAG,KAAKF,KAAL,IAAc,CAAd,IAAmB,KAAKH,KAAL,CAAWE,OAAX,GAAqB,CAA3C,EAA8C;AAC7C,aAAKC,KAAL,GAAaI,WAAW,CAAC,KAAKD,SAAN,EAAiB,IAAjB,CAAxB;AACA;AACD;;;gCAEU;AACV;AACA,UAAIJ,OAAO,GAAG,KAAKF,KAAL,CAAWE,OAAX,GAAoB,CAAlC;AACA,WAAKM,QAAL,CAAc;AACbP,QAAAA,IAAI,EAAE,KAAKQ,aAAL,CAAmBP,OAAnB,CADO;AAEbA,QAAAA,OAAO,EAAEA;AAFI,OAAd,EAHU,CAOV;;AACA,UAAGA,OAAO,IAAI,CAAd,EAAiB;AAChBQ,QAAAA,aAAa,CAAC,KAAKP,KAAN,CAAb;AACA;AACD;;;kCAEaQ,I,EAAK;AAClB,UAAIC,KAAJ,EAAWC,OAAX,EAAoBX,OAApB;AACAU,MAAAA,KAAK,GAAGE,IAAI,CAACC,KAAL,CAAWJ,IAAI,IAAI,KAAI,EAAR,CAAf,CAAR;AAEA,UAAIK,mBAAmB,GAAGL,IAAI,IAAI,KAAK,EAAT,CAA9B;AACAE,MAAAA,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWC,mBAAmB,GAAG,EAAjC,CAAV;AAEA,UAAIC,mBAAmB,GAAGD,mBAAmB,GAAG,EAAhD;AACAd,MAAAA,OAAO,GAAGY,IAAI,CAACI,IAAL,CAAUD,mBAAV,CAAV;AAEA,UAAIE,GAAG,GAAG;AACT,aAAKP,KADI;AAET,aAAKC,OAFI;AAGT,aAAKX;AAHI,OAAV;AAKA,aAAOiB,GAAP;AACA;;;wCAEkB;AAClB,UAAIC,WAAW,GAAG,KAAKX,aAAL,CAAmB,KAAKT,KAAL,CAAWE,OAA9B,CAAlB;AACA,WAAKM,QAAL,CAAc;AAACP,QAAAA,IAAI,EAAEmB;AAAP,OAAd;AACA;;;2CAEqB;AACrB,UAAIC,QAAQ,GAAG,KAAKC,KAAL,CAAWC,cAA1B;;AACA,UAAGF,QAAQ,IAAI,sBAAf,EAAsC;AACrC,aAAKjB,UAAL;AACA;AACD;;;6BAEO;AAEP;AACA;AACA;AACA,0BACC;AAAK,QAAA,KAAK,EAAE;AAACoB,UAAAA,KAAK,EAAC;AAAP,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,KAAKxB,KAAL,CAAWC,IAAX,CAAgBwB,CADlB,OACsB,KAAKzB,KAAL,CAAWC,IAAX,CAAgByB,CADtC,CADD;AAKA;;;;EArEoB5B,S;;AAwEtB,eAAeC,OAAf","sourcesContent":["import React, {Component} from 'react'\r\n\r\nclass Airdrop extends Component{\r\n\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state = {time: {}, seconds: 20};\r\n\t\tthis.timer = 0;\r\n\t\tthis.startTimer = this.startTimer.bind(this);\r\n\t\tthis.countdown = this.countdown.bind(this);\r\n\t}\r\n\r\n\tstartTimer(){\r\n\t\tif(this.timer == 0 && this.state.seconds > 0) {\r\n\t\t\tthis.timer = setInterval(this.countdown, 1000)\r\n\t\t}\r\n\t}\r\n\r\n\tcountdown(){\r\n\t\t//Count 1 second at the time\r\n\t\tlet seconds = this.state.seconds -1\r\n\t\tthis.setState({\r\n\t\t\ttime: this.secondsToTime(seconds),\r\n\t\t\tseconds: seconds\r\n\t\t})\r\n\t\t//Stop counting when hits 0\r\n\t\tif(seconds == 0) {\r\n\t\t\tclearInterval(this.timer)\r\n\t\t}\r\n\t}\r\n\r\n\tsecondsToTime(secs){\r\n\t\tlet hours, minutes, seconds\r\n\t\thours = Math.floor(secs / (60 *60))\r\n\r\n\t\tlet devisor_for_minutes = secs % (60 * 60)\r\n\t\tminutes = Math.floor(devisor_for_minutes / 60)\r\n\r\n\t\tlet devisor_for_seconds = devisor_for_minutes % 60\r\n\t\tseconds = Math.ceil(devisor_for_seconds)\r\n\r\n\t\tlet obj = {\r\n\t\t\t'h': hours,\r\n\t\t\t'm': minutes,\r\n\t\t\t's': seconds\r\n\t\t}\r\n\t\treturn obj\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tlet timeLeftVar = this.secondsToTime(this.state.seconds)\r\n\t\tthis.setState({time: timeLeftVar})\r\n\t}\r\n\r\n\tairdropReleaseTokens(){\r\n\t\tlet stakingB = this.props.stakingBalance\r\n\t\tif(stakingB >= '50000000000000000000'){\r\n\t\t\tthis.startTimer()\r\n\t\t}\r\n\t}\r\n\r\n\trender(){\r\n\r\n\t\t//Airdrop has a timer that counts down\r\n\t\t//initialize after our customer has staked at least 50 tokens\r\n\t\t//timer functionality, countdown, startTimer, state - for time to work\r\n\t\treturn(\r\n\t\t\t<div style={{color:'black'}}>\r\n\t\t\t\t{this.state.time.m}:{this.state.time.s}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Airdrop;"]},"metadata":{},"sourceType":"module"}